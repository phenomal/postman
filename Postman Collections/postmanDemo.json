{
	"info": {
		"_postman_id": "5e63b2e8-7867-4154-a899-7212a8cd66f5",
		"name": "Collection Demo",
		"description": "Demo of api testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cda04f8d-c8e4-40bb-bb01-ef16c8948c1b",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the data object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('object').that.includes.keys('id', 'email', 'first_name', 'last_name', 'avatar');\r",
							"    \r",
							"    pm.expect(responseData.data.id).to.be.a('number');\r",
							"    pm.expect(responseData.data.email).to.be.a('string').that.matches(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
							"    pm.expect(responseData.data.first_name).to.be.a('string');\r",
							"    pm.expect(responseData.data.last_name).to.be.a('string');\r",
							"    pm.expect(responseData.data.avatar).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist.and.to.have.property('email').that.is.a('string').and.satisfy(email => {\r",
							"        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"        return emailRegex.test(email);\r",
							"    }, \"Email format is invalid\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate user details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.data.email).to.eql(\"janet.weaver@reqres.in\");\r",
							"    pm.expect(jsonData.data.first_name).to.eql(\"Janet\");\r",
							"    pm.expect(jsonData.data.last_name).to.eql(\"Weaver\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "9aaac064-46bd-4cda-b80e-8e67f36687a7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": "https://{{prodURL}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5ad00cf5-51fb-48ec-82be-a81c84f4bdce",
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields: name, job, id, and createdAt\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('name', 'job', 'id', 'createdAt');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate data types of the response fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string');\r",
							"    pm.expect(responseData.job).to.be.a('string');\r",
							"    pm.expect(responseData.id).to.satisfy(function(value) {\r",
							"        return typeof value === 'string' || typeof value === 'number';\r",
							"    });\r",
							"    pm.expect(new Date(responseData.createdAt).getTime()).to.be.above(0); // Check if createdAt is a valid date\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"\r",
							"pm.test(\"The 'id' field must not be null or empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.have.lengthOf.at.least(1, \"The 'id' field should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate user details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"});\r",
							"\r",
							"//Create Variables\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"userName\", jsonData.name);\r",
							"pm.collectionVariables.set(\"userJob\", jsonData.job);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7665427a-2cb3-4466-9811-9b39e334f408",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{userName}}\",\r\n    \"job\": \"{{userJob}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://{{prodURL}}/api/users"
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "945f2fcd-b2c6-4893-bb16-ffe3d97f9e65",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('name', 'job', 'updatedAt');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema of the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('name', 'job', 'updatedAt');\r",
							"    pm.expect(responseData.name).to.be.a('string');\r",
							"    pm.expect(responseData.job).to.be.a('string');\r",
							"    pm.expect(responseData.updatedAt).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate user details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(\"Anthony\");\r",
							"    pm.expect(jsonData.job).to.eql(\"Executive\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8a6241c0-7e6b-4870-b709-e81142711e0d",
						"exec": [
							"console.log(pm.collectionVariables.get(\"userName\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ed1b943a-3581-4d33-8aaf-066387165053",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Anthony\",\r\n    \"job\": \"Executive\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://{{prodURL}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "Partial Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2b9e7bc3-6902-4f8c-8fb8-d638e01c1b2b",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields: name and updatedAt\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.all.keys('name', 'updatedAt');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name must be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"updatedAt is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.updatedAt).to.exist;\r",
							"    pm.expect(new Date(responseData.updatedAt).getTime()).to.not.be.NaN;\r",
							"});\r",
							"\r",
							"pm.test(\"Validate user details\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(\"Zack\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "efc37964-6bd6-45ae-84fb-6cecb92f646f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Zack\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://{{prodURL}}/api/users/2"
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de4b4834-b0d4-4687-9aa4-5526451e9da0",
						"exec": [
							"pm.test(\"Response status code is 204\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(204);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validate that no additional data is returned in the response body\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a228a9d4-8597-4dcd-be76-2fe73459731e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "reqres-free-v1",
						"type": "text"
					}
				],
				"url": "https://{{prodURL}}/api/users/2"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0e285ab5-41e3-4754-86ad-eef48f29a04d",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3b8d1a87-9d42-41ff-8647-1f08f45ee9dc",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userJob",
			"value": ""
		},
		{
			"key": "prodURL",
			"value": "reqres.in",
			"type": "string"
		}
	]
}